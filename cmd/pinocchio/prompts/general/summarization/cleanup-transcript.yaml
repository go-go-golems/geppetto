name: cleanup-transcript
short: Clean up and summarize a conversation transcript.
factories:
  chat:
    stop: [ "--- END CLEANED UP TRANSCRIPT", ]
flags:
  - name: type
    type: choice
    choices: ["technical", "medical", "customer_support", "sales_business", "educational", "casual_personal", "interviews"]
    help: Type of conversation
    default: "technical"
  - name: additional_system
    type: string
    help: Additional system prompt
    default: ""
  - name: additional
    type: string
    help: Additional prompt
    default: ""
  - name: context
    type: fileList
    help: Additional context from files
  - name: concise
    type: bool
    help: Give concise answers
    default: false
  - name: bullet_points
    type: bool
    help: Use bullet points in the answer
    default: false
  - name: keyword
    type: bool
    help: Use keywords in the answer
    default: false
  - name: transcript
    type: stringFromFile
    help: The transcript to be cleaned up
    required: true
  - name: with_example
    type: bool
    help: Include an example of a cleaned up transcript
    default: false
system-prompt: |
  Please process the following transcript according to the cleanup instructions provided.
  Retain the natural flow, remove redundancies, and make each message tighter and more consistent.
  The goal is to provide all the information contained in the original transcript but in a more readable format.
  {{ .additional_system }}
prompt: |
  --- BEGIN TRANSCRIPT
  {{ .transcript}}
  --- END TRANSCRIPT
  
  --- BEGIN INSTRUCTIONS
  Instructions:
  1. Read through the entire transcript to understand the context and main points of the conversation.
  2. Make each message to be tighter, keeping the conversational flow and the original voice.
     Don't replace information by "X did Y", keep the full information contained in the message.
  
     {{ if eq .type "technical" }}If the message contains a code snippet, output it verbatim.{{end}}
  
     Identify and remove any redundant or repetitive messages. 
     Ensure that the conversational flow remains logical and coherent after removal.
  
     When outputting code snippets, keep the original content. Don't elide or summarize them.
  
     Give the full informational content of the original message, don't skip it or replace it by a meta description.
  
     Keep the original voice for each message, as if the original person said it.
     For example, if the message is from the user, don't say "The user ...", just say "I ...".
  
     Never skip the first user message. Always start the conversation with the user.
  3. Once you've processed all messages, list down the main points discussed in the conversation in bullet format.
  4. Conclude with a "TL;DR" of the entire conversation, capturing the essence and primary outcomes.

  {{ if eq .type "technical" -}}
  - Identify and retain any specific jargon or technical terms used.
  - If abbreviations are used, ensure they are defined the first time they appear.
  - Highlight or note any formulas, equations, or code snippets for clarity.
  - If there are code snippets, output them verbatim.
  - Don't omit any code snippet.
  {{- else if eq .type "medical" -}}
  - Retain any medical terminology or drug names mentioned.
  - Ensure patient confidentiality by removing or redacting any personally identifiable information.
  - Highlight recommendations, dosages, or treatment plans.
  {{- else if eq .type "customer_support" -}}
  - Prioritize and retain any solutions or troubleshooting steps provided.
  - Redact any personal or account-related information for privacy.
  - Highlight any feedback or suggestions from the customer.
  {{- else if eq .type "sales_business" -}}
  - Retain details of any products, services, or offers discussed.
  - Note any commitments, agreements, or follow-up actions.
  - Redact sensitive business information or financial figures, unless necessary.
  {{- else if eq .type "educational" -}}
  - Highlight key learning points or takeaways.
  - Retain any references, sources, or external links provided.
  - Summarize any examples or case studies mentioned for clarity.
  {{- else if eq .type "casual_personal" -}}
  - Respect privacy by removing any personal details or sensitive topics.
  - Retain the emotional tone or sentiment of the conversation.
  - Highlight any plans, decisions, or agreements made between participants.
  {{- else if eq .type "interviews" -}}
  - Highlight answers to specific questions for easy reference.
  - Retain any credentials, experiences, or qualifications discussed.
  - Note any follow-up actions, such as second interviews or task assignments.
  {{- end }}
  
  Always use the format **NAME**: MESSAGE for each message.
  
  {{ if .with_example }}
  Here is an example of a cleanup transcript. It is just provided as a showcase of the desired structure.
  
  --- CLEANED UP TRANSCRIPT
  
  ## Transcript
  
  **John**: Hey Alex, I've been working on this Python project for a while now, and I'm having some trouble with a piece of code. I keep getting a syntax error on line 10, but I can't figure out what's wrong. I've been staring at it for hours. Here's the code snippet: `print("Hello, World!")`. Any ideas?

  **Alex**: Hi John, from what you've shown me, your code seems to be correct. Syntax errors can sometimes be tricky because they might not necessarily be on the line where the error is reported. Could you provide more context? Maybe the issue is in the lines before or after line 10.

  **John**: Sure, Alex. Here's a bit more of the code: `print("Hello,") print("World!")`. I'm trying to print two separate lines, but it's not working as expected.

  **Alex**: Ah, I see the issue now. In Python, you're missing a semicolon between the two print statements. It should be `print("Hello,"); print("World!")`. This will allow you to print both statements on separate lines.

  **John**: Oh, I see. That makes sense. Thanks for the help, Alex. I'll try that and see if it solves the problem.

  ## Main points
  - John is having a syntax error in his Python code and has been unable to solve it.
  - Alex suggests that the error might not be on the reported line and asks for more context.
  - Upon receiving more context, Alex identifies the error as a missing semicolon between two print statements.
  - Alex provides a solution, which John plans to implement.

  ## TL;DR
  
  John was experiencing a syntax error in his Python code and couldn't figure out the problem. Alex identified the issue as a missing semicolon between two print statements and provided a solution, which John agreed to implement.
  
  --- END CLEANED UP TRANSCRIPT
  {{ end }}

  {{ if .additional }}
  Additional instructions:
  {{ .additional }}
  {{ end }}

  {{ if .context}}Additional Context:
  {{ range .context }}
  Path: {{ .Path }}
  ---
  {{ .Content }}
  ---
  {{- end }}
  {{ end }}
  {{ if .concise -}}
  Give a concise answer, answer in a single sentence if possible, skip unnecessary explanations.
  {{- end }}
  {{ if .bullet_points -}}
  Use bullet points in the answer.
  {{- end }}
  {{ if .keyword -}}
  Use keywords in the answer, not full sentences.
  {{- end }}
  
  --- END INSTRUCTIONS
  
  --- BEGIN CLEANED UP TRANSCRIPT
