name: generate-dsl-diff
short: Generate a 'differential' DSL YAML diff for adding docstrings to methods.
flags:
  - name: additional_system
    type: stringList
    help: Additional system prompt
    default: []
  - name: additional
    type: stringList
    help: Additional prompt
    default: []
  - name: context
    type: fileList
    help: Additional context from files
  - name: diff
    type: file
    help: Diff file with new content to be added.
    required: true
  - name: target
    type: file
    help: File to which the diff will be applied (old content).
    required: true
system-prompt: |
    You are an advanced code diff tool with expertise in analyzing and understanding codebases. Your primary function is to generate 'differential' (our diff application tool) YAML-based DSLs for code modifications. You are proficient in identifying the context of code changes and suggesting the most appropriate actions, such as insert, delete, move, replace, prepend, or append. You provide clear and precise instructions for applying diffs to code files, ensuring that the modifications are contextually relevant and syntactically correct. Your responses are concise and focused solely on creating accurate and efficient code diffs.
    {{ .additional_system | join "\n" }}
prompt: |
  {{ define "context" -}}
  {{ if .additional }}Additional instructions:
  {{ .additional | join "\n" }}{{ end }}
  {{- end }}

  Create the 'differential' DSL YAML diff to add the docstrings to relevant methods.
  Use 'insert' as an action if possible.
  Don't forget to specify the relevant context (for example, above when doing insert).
  Code can differ slightly between the old content and diff (for example, it can be shortened in the diff).
  Use the code in the old content as reference for the context (for example, if function definitions differ but 
  are related, use the definitions from old content), 
  so that the resulting YAML DSL can be applied against the old content.

  Create diff entries for all changes in the input diff.

  ---
  Here is the target DSL.

  # 'differential' DSL Guide
  ## Purpose
  A YAML-based DSL for code modifications using a content-contextual method.
  ## DSL Format
  ```yaml
  path: <path_to_source_file>
  changes:
    - comment: <change_reason>
      action: <action_type>
      # ...<additional_action_fields>
  ```
  ## Fields
  - `path`: Path to the source file.
  - `changes`: List of modifications with:
    - `comment`: Reason for the change.
    - `action`: Type of change ("insert", "delete", "move", "replace", "prepend", "append").
    - Additional fields based on the action type.
  ## Actions
  ### Replace
  - `action`: "replace"
  - `old`: Original code block.
  - `new`: Replacement code block.
  ### Insert
  - `action`: "insert"
  - `content`: Code to insert.
  - `above`: Context line for placement (refers to text lines).
  ### Delete
  - `action`: "delete"
  - `content`: Code block to remove.
  ### Move
  - `action`: "move"
  - `content`: Code block to move.
  - `above`: Context line for new placement (refers to text lines).
  ### Prepend
  - `action`: "prepend"
  - `content`: Code to add at the start of the file. Only used for adding things as header.
  ### Append
  - `action`: "append"
  - `content`: Code to add at the end of the file. Only used for adding things as footer.
  ## DSL Sample
  ```yaml
  path: source_file.py
  changes:
    - comment: Refactor for performance
      action: replace
      old: |
        def outdated_function():
            pass
      new: |
        def updated_function():
            print('Enhanced')
    - comment: Add init function
      action: prepend
      content: |
        def initialize():
            print('Starting')
    - comment: Add cleanup at the end
      action: append
      content: |
        def cleanup():
            print('Shutting down')
    - comment: Delete deprecated function
      action: delete
      content: |
        def unnecessary_function():
            pass
    - comment: Reorganize code
      action: move
      content: |
        def misplaced_function():
            print('Operational')
      above: |
        def target_location():
    - comment: Add new functionality
      action: insert
      content: |
        def new_function():
            print('New functionality')
      above: |
        def existing_function():
  ```

  {{ template "context" . }}

  {{ if .context}}Additional Context:
  {{ range .context }}
  Path: {{ .Path }}
  ---
  {{ .Content }}
  ---
  {{- end }}
  {{ end }}

  ---

  Diff file (new content):

  ---

  {{ .diff.Content }}

  ---

  File to apply diff to (old content): 
  filename: {{ .target.Path }}

  ---

  {{ .target.Content }}

  ---

  Create the 'differential' DSL YAML diff to add the docstrings to relevant methods.
  Use 'insert' as an action if possible.
  Don't forget to specify the relevant context (for example, above when doing insert).
  Code can differ slightly between the old content and diff (for example, it can be shortened in the diff).
  Use the code in the old content as reference for the context (for example, if function definitions differ but 
  are related, use the definitions from old content), 
  so that the resulting YAML DSL can be applied against the old content.

  Create diff entries for all changes in the input diff.
  
  Output the entire diff, and then the token END_DIFF at the end. Don't stop before outputting the entire diff.

  {{ if .bracket }}
  {{ template "context" . }}
  {{ end }}
