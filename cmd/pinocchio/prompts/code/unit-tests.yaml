name: unit-tests
short: Generate a list of unit tests for given code.
flags:
  - name: code
    type: stringFromFiles
    help: Code to generate unit tests for
    required: true
  - name: language
    type: string
    help: Programming language of the code
  - name: with_signature
    type: bool
    help: Whether to include signature in the output
  - name: with_implementation
    type: bool
    help: Whether to include implementation in the output
    default: false
  - name: with_comments
    type: bool
    help: Whether to include comments in the output
    default: false
  - name: only_code
    type: bool
    help: Whether to only output the code
    default: false
  - name: framework
    type: string
    help: Framework to use for generating unit tests
  - name: table_driven
    type: bool
    help: Whether to use table driven tests
    default: false
  - name: additional_system
    type: string
    help: Additional system prompt
    default: ""
  - name: additional
    type: stringList
    help: Additional prompt
    default: []
  - name: context
    type: fileList
    help: Additional context from files
  - name: bracket
    type: bool
    help: Whether to use bracket context with instructions
    default: false
system-prompt: |
  You are a meticulous and experienced software engineer with a deep understanding of testing and unit tests.
  {{ if .language }} You are an expert in {{ .language }} programming language.{{end}}
  You are known for your ability to think of all possible edge cases and your attention to detail. You write clear and concise code.
  {{ .additional_system }}
prompt: |
  {{ define "context" -}}
  {{ .query | join " " }}
  {{ if .additional }}Additional instructions:
  {{ .additional | join "\n" }}{{ end }}
  {{ if .concise }}
  Give a concise answer, answer in a single sentence if possible, skip unnecessary explanations.
  {{- end }}{{ if .use_bullets }}
  Use bullet points in the answer.
  {{- end }}{{ if .use_keywords }}
  Use keywords in the answer, not full sentences.
  {{- end }}
  {{- end }}
  
  {{ template "context" . }}
  
  Create unit tests to test the given code.
  
  {{ if not .only_code }}
  As an advanced AI assistant, you are here to guide me through the process of writing effective unit tests for my program.
  Let's begin by understanding the workings of my program, identifying potential edge cases, and considering important factors that could affect the functionality of my program.
  
  Firstly, could you provide a brief overview of your program's functionality? This will help us identify the key areas that need to be tested.
  
  Secondly, let's think about potential edge cases. These are scenarios that are not part of the regular operations of your program but could occur and need to be handled correctly.
  
  Lastly, let's consider any important factors that could affect the functionality of your program. These could be external dependencies, user input, or specific conditions under which your program operates.
  
  Remember, the goal of unit testing is not just to find bugs, but to validate that each component of your program is working as expected under various conditions.
  
  Be exhaustive, think of all the edge cases.
  Return a list of bullet points describing each test.
  {{- end }}
  Here is the code:
  
  ```
  {{ .code }}
  ```
  
  {{ if .framework }}Use {{ .framework }} framework for generating unit tests.{{end}}
  {{ if .table_driven }}Use table driven tests.{{end}}
  {{ if .with_signature }}
  After listing the unit tests, write the signature (not the test itself) of the function that would implement the tests.
  {{- end }}
  {{ if (or .with_implementation .only_code)  -}}
  Please provide the implementation for each test.
  {{ if .with_comments }}
  Write a short comment before each test describing the purpose of the test, if not obvious from the test name.
  Don't write obvious comments that just repeat the test name.
  {{- end }}
  {{- end }}
  
  {{ if .context}}Additional Context:
  {{ range .context }}
  Path: {{ .Path }}
  ---
  {{ .Content }}
  ---
  {{- end }}
  {{ end }}
  
  {{ if .bracket }}
  {{ template "context" . }}
  {{ end }}
  
