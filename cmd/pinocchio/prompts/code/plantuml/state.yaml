name: state
short: Generate a PlantUML state machine diagram from source code

arguments:
  - name: input
    type: stringFromFile
    help: Input to generate diagram for

flags:
  - name: style
    type: string
    default: state
    help: Diagram state

  - name: uml_spec
    type: stringFromFile
    short: u
    help: PlantUML syntax spec to include
    default: |
      # PlantUML State Diagram Syntax Documentation

      ## Overview
        State diagrams are graphical representations that show the states a system or object can be in and the transitions between those states. They are crucial for understanding the system's dynamic behavior. PlantUML offers a text-based language that's efficient, consistent, and versatile for generating these diagrams.

      ## Basic Elements

      ### States
      - **Simple State**: Defined using state names.
                            ```plantuml
                            @startuml
        [*] --> State1
                            State1 --> [*]
                            @enduml
                            ```
      - **Composite State**: Defined using `state` keyword and braces.
                               ```plantuml
                               @startuml
                               state CompositeState {
        [*] --> SubState1
                               SubState1 --> [*]
                               }
                               @enduml
                               ```
      - **Long Description**: Use the `state` keyword for states with long descriptions.
                 ```plantuml
                 state "Long State Description" as long1
                 ```

      ### Transitions
      - Arrows are defined using `-->` or `->` for transitions.
        ```plantuml
        State1 -> State2
        ```
      - **Conditional Transitions**: Use square brackets for conditions.
                        ```plantuml
                        State1 --> State2 : [condition]
                        ```

      ### Stereotypes
      - Stereotypes like `<<start>>`, `<<choice>>`, `<<fork>>`, `<<join>>`, and `<<end>>` can be used to annotate states.
        ```plantuml
        state start1 <<start>>
        state choice1 <<choice>>
        ```

      ### Entry and Exit Points
      - Use `<<entryPoint>>` and `<<exitPoint>>` stereotypes.
        ```plantuml
        state entry <<entryPoint>>
        state exit <<exitPoint>>
        ```

      ### Parallel States
      - Use `--` or `||` to define concurrent states within a composite state.
        ```plantuml
        state Concurrent {
        [*] --> State1
        --
        [*] --> State2
        }
        ```

      ### History
      - `[H]` is for shallow history and `[H*]` is for deep history.

      ### Fork and Join
      - Use `<<fork>>` and `<<join>>` stereotypes to represent parallel paths.
        ```plantuml
        state fork <<fork>>
        state join <<join>>
        ```

      ### Arrow Directions
      - You can specify arrow directions with `-up->`, `-down->`, `-left->`, `-right->`.

      ### Line Styles
      - Line styles and colors can be changed.
        ```plantuml
        S1 -[#red,dashed]-> S2
        ```

      ### Notes
      - Notes can be attached to states or transitions.
        ```plantuml
        note left of State1: this is a note
        ```

      ## Advanced Elements

      ### Expansion Points
      - Use `<<expansionInput>>` and `<<expansionOutput>>` for expansion regions.

      ### Input and Output Pins
      - Use `<<inputPin>>` and `<<outputPin>>` stereotypes for pins in activities.

      ### Conditional State (Choice)
      - Use `<<choice>>` for conditional branching.



  - name: context
    type: stringFromFiles
    help: Context for the input

  - name: instructions
    type: string
    help: Instructions for the input

  - name: concise
    type: bool
    short: c
    help: Focus on conciseness and legibility

  - name: additional_system
    type: string
    help: Additional system prompt
    default: ""

  - name: additional
    type: string
    help: Additional prompt
    default: ""

  - name: code
    type: bool
    help: Input is code
    default: false

  - name: list_sections
    type: bool
    help: List the sections in the input
    default: false

  - name: with_summary
    type: bool
    help: Give a summary of the input at the end
    default: false

system-prompt: |
  You are an experienced system architect with expertise in designing complex software systems and architectures.
  You have mastered modeling techniques like UML and are highly skilled at 
  creating clear PlantUML diagrams from code and specifications. 
  
  You have deep knowledge of software design patterns, 
  distributed systems, microservices, domain driven design and other architectural approaches.
  You can rapidly analyze code and specs to identify key components, relationships, flows and boundaries.
  
  Your PlantUML diagrams are exemplars of clarity, brevity and precision.
  They convey the essence of the architecture and design to stakeholders and developers.
  The structure is easy to understand, with minimal syntax and annotations.
  The diagrams aid development, troubleshooting and future maintenance.
  
  {{ .additional_system }}

prompt: |
  Given the {{.style}} diagram spec:

  {{.uml_spec}}

  {{if .context}}{{ .context }}{{end}}
  {{if .instructions}}{{ .instructions }}{{end}}
  
  Write a diagram for the following input, {{if .concise}}focusing on conciseness and legibility{{end}}:
  
  
  ```
  {{.input}}
  ```

  Only use plantuml constructs defined in the specification above.
  
  As the first thing, write a title and a short paragraph that describes what the diagram is describing and its purpose.
  
  {{ if .list_sections }}
  Before outputting the diagram:
  - Make a list of the states in the input before outputting the diagram.
  - Make a list of the transitions in the input before outputting the diagram.
    The transitions are not necessarily in order, mention this in your output too by calling the section "Transitions (not necessarily in order)".
  {{ if .code }}
  - For each step, list only the important functions called and important variables.
  {{ end }}
  {{ end }}
  
  {{ if .code }}
  Don't create new function names. only use original variable and function names present in the input (if it is code).
  {{ end }}
  Use short keyword sentences.
  
  {{ if .with_summary }}
  At the end, give a summary of the input, as a bullet list of the different steps.
  {{ end }}
  
  {{ .additional }}
  
