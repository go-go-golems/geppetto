name: activity
short: Generate a PlantUML activity diagram from source code

arguments:
  - name: input
    type: stringFromFile
    help: Input to generate diagram for

flags:
  - name: style
    type: string
    default: activity
    help: Diagram type to generate. Supported types are activity, sequence, class, state

  - name: uml_spec
    type: stringFromFile
    short: u
    help: PlantUML syntax spec to include
    default: |
      ## Simple action

        Activities label starts with `:` and ends with `;`. Text formatting can be done using creole wiki syntax. They are implicitly linked in their definition order.
        
        @startuml
        :Hello world;
        :This is defined on
        several **lines**;
        @enduml
        
        ## Start/Stop/End
        
        You can use `start` and `stop` keywords to denote the beginning and the end of a diagram.
        
        @startuml
        start
        :Hello world;
        :This is defined on
        several **lines**;
        stop
        @enduml
        
        You can also use the `end` keyword.
        
        @startuml
        start
        :Hello world;
        :This is defined on
        several **lines**;
        end
        @enduml


      ## Conditional

      You can use `if`, `then` and `else` keywords to put tests in your diagram. Labels can be provided using parentheses. The 3 syntaxes are possible:

        -   `if (...) then (...)`

        @startuml
        
        start
        
        if (Graphviz installed?) then (yes)
        :process all\ndiagrams;
        else (no)
        :process only
        __sequence__ and __activity__ diagrams;
        endif
        
        stop
        
        @enduml


      -   `if (...) is (...) then`
        
        @startuml
        if (color?) is (&lt;color:red&gt;red) then
        :print red;
        else
        :print not red;
        @enduml


      -   `if (...) equals (...) then`
        
        @startuml
        if (counter?) equals (5) then
        :print 5;
        else
        :print not 5;
        @enduml



      ### Several tests (horizontal mode)

      You can use the `elseif` keyword to have several tests _(by default, it is the horizontal mode)_:

        @startuml
        start
        if (condition A) then (yes)
        :Text 1;
        elseif (condition B) then (yes)
        :Text 2;
        stop
        (no) elseif (condition C) then (yes)
        :Text 3;
        (no) elseif (condition D) then (yes)
        :Text 4;
        else (nothing)
        :Text else;
        endif
        stop
        @enduml


      ### Several tests (vertical mode)

      You can use the command `!pragma useVerticalIf on` to have the tests in vertical mode:

        @startuml
        !pragma useVerticalIf on
        start
        if (condition A) then (yes)
        :Text 1;
        elseif (condition B) then (yes)
        :Text 2;
        stop
        elseif (condition C) then (yes)
        :Text 3;
        elseif (condition D) then (yes)
        :Text 4;
        else (nothing)
        :Text else;
        endif
        stop
        @enduml
        
        
        
        ## Switch and case \[switch, case, endswitch\]
        
        You can use `switch`, `case` and `endswitch` keywords to put switch in your diagram. Labels can be provided using parentheses.
        
        @startuml
        start
        switch (test?)
        case ( condition A )
        :Text 1;
        case ( condition B )
        :Text 2;
        case ( condition C )
        :Text 3;
        case ( condition D )
        :Text 4;
        case ( condition E )
        :Text 5;
        endswitch
        stop
        @enduml
        
        
        ## Conditional with stop on an action \[kill, detach\]
        
        You can stop action on a if loop.
        
        @startuml
        if (condition?) then
        :error;
        stop
        endif
        #palegreen:action;
        @enduml


      But if you want to stop at the precise action, you can use the `kill` or `detach` keyword:

        -   `kill`

        @startuml
        if (condition?) then
        #pink:error;
        kill
        endif
        #palegreen:action;
        @enduml

      -   `detach`
        
        @startuml
        if (condition?) then
        #pink:error;
        detach
        endif
        #palegreen:action;
        @enduml
        
        
        ## Repeat loop
        
        You can use `repeat` and `repeatwhile` keywords to have repeat loops.
        
        @startuml
        
        start
        
        repeat
        :read data;
        :generate diagrams;
        repeat while (more data?) is (yes)
        -&gt;no;
        stop
        
        @enduml
        
        
        It is also possible to use a full action as `repeat` target and insert an action in the return path using the `backward` keyword.
        
        @startuml
        
        start
        
        repeat :foo as starting label;
        :read data;
        :generate diagrams;
        backward:This is backward;
        repeat while (more data?)
        
        stop
        
        @enduml
        
        
        ## Break on a repeat loop \[break\]
        
        You can use the `break` keyword after an action on a loop.
        
        @startuml
        start
        repeat
        :Test something;
        if (Something went wrong?) then (no)
        #palegreen:OK;
        break
        endif
        -&gt;NOK;
        :Alert "Error with long text";
        repeat while (Something went wrong with long text?) is (yes) not (no)
        -&gt;//merged step//;
        :Alert "Success";
        stop
        @enduml
        
        ## While loop
        
        You can use `while` and `endwhile` keywords to have repeat loops.
        
        @startuml
        
        start
        
        while (data available?)
        :read data;
        :generate diagrams;
        endwhile
        
        stop
        
        @enduml
        
        
        It is possible to provide a label after the `endwhile` keyword, or using the `is` keyword.
        
        @startuml
        while (check filesize ?) is (not empty)
        :read file;
        endwhile (empty)
        :close file;
        @enduml
        
        
        If you are using `detach` to form an infinite while loop, then you will want to also hide the partial arrow that results using `-[hidden]->`
        
        @startuml
        :Step 1;
        if (condition1) then
        while (loop forever)
        :Step 2;
        endwhile
        -[hidden]-&gt;
        detach
        else
        :end normally;
        stop
        endif
        @enduml
        
        
        ## Notes
        
        Text formatting can be done using creole wiki syntax. A note can be floating, using `floating` keyword.
        
        @startuml
        
        start
        :foo1;
      floating note left: This is a note
        :foo2;
        note right
        This note is on several
        //lines// and can
        contain &lt;b&gt;HTML&lt;/b&gt;
        ====
        * Calling the method ""foo()"" is prohibited
        end note
        stop
        
        @enduml


      You can add note on backward activity:

        @startuml
        start
        repeat :Enter data;
        :Submit;
        backward :Warning;
      note right: Note
        repeat while (Valid?) is (No) not (Yes)
        stop
        @enduml

      ## Grouping or partition

      ### Group

      You can group activity together by defining group:

        @startuml
        start
        group Initialization
        :read config file;
        :init internal variable;
        end group
        group Running group
        :wait for user interaction;
        :print information;
        end group
        
        stop
        @enduml

      ### Partition

      You can group activity together by defining partition:

        @startuml
        start
        partition Initialization {
        :read config file;
        :init internal variable;
      }
        partition Running {
        :wait for user interaction;
        :print information;
      }

        stop
        @enduml

      It's also possible to change partition color:

        @startuml
        start
        partition #lightGreen "Input Interface" {
        :read config file;
        :init internal variable;
      }
        partition Running {
        :wait for user interaction;
        :print information;
      }
        stop
        @enduml
        
        @startuml
        start
        partition "[[http://plantuml.com partition_name]]" {
        :read doc. on [[http://plantuml.com plantuml_website]];
        :test diagram;
      }
        end
        @enduml

  - name: context
    type: stringFromFiles
    help: Context for the input

  - name: instructions
    type: string
    help: Instructions for the input

  - name: concise
    type: bool
    short: c
    help: Focus on conciseness and legibility

  - name: noLoops
    type: bool
    short: n
    help: Don't use foreach loops, use while/repeat instead

  - name: additional_system
    type: string
    help: Additional system prompt
    default: ""

  - name: additional
    type: string
    help: Additional prompt
    default: ""

  - name: code
    type: bool
    help: Input is code
    default: false

  - name: list_sections
    type: bool
    help: List the sections in the input
    default: false

  - name: with_summary
    type: bool
    help: Give a summary of the input at the end
    default: false

system-prompt: |
  You are an experienced system architect with expertise in designing complex software systems and architectures.
  You have mastered modeling techniques like UML and are highly skilled at 
  creating clear PlantUML diagrams from code and specifications. 
  
  You have deep knowledge of software design patterns, 
  distributed systems, microservices, domain driven design and other architectural approaches.
  You can rapidly analyze code and specs to identify key components, relationships, flows and boundaries.
  
  Your PlantUML diagrams are exemplars of clarity, brevity and precision.
  They convey the essence of the architecture and design to stakeholders and developers.
  The structure is easy to understand, with minimal syntax and annotations.
  The diagrams aid development, troubleshooting and future maintenance.
  
  {{ .additional_system }}

prompt: |
  Given the {{.style}} diagram spec:

  {{.uml_spec}}

  {{if .context}}{{ .context }}{{end}}
  {{if .instructions}}{{ .instructions }}{{end}}
  
  Write a diagram for the following input, {{if .concise}}focusing on conciseness and legibility{{end}}:

  
  ```
  {{.input}}
  ```

  Only use plantuml constructs defined in the specification above.
  Don't use foreach for loops, instead use while or repeat when appropriate.
  
  As the first thing, write a title and a short paragraph that describes what the diagram is describing and its purpose.
  
  {{ if .list_sections }}
  Before outputting the diagram:
  - Make a list of the components in the input before outputting the diagram.
  - Make a list of the steps in the input before outputting the diagram.
    The steps are not necessarily in order, mention this in your output too by calling the section "Steps (not necessarily in order)".
  {{ if .code }}
  - For each step, list only the important functions called and important variables.
  {{ end }}
  {{ end }}
  
  {{ if .code }}
  Don't create new function names. only use original variable and function names present in the input (if it is code).
  {{ end }}
  Use short keyword sentences.
  
  {{ if .with_summary }}
  At the end, give a summary of the input, as a bullet list of the different steps.
  {{ end }}
  
  {{ .additional }}
  
