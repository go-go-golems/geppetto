name: component
short: Generate a PlantUML component diagram


arguments:
  - name: input
    type: stringFromFiles
    help: Input to generate diagram for

flags:
  - name: topic
    type: string
    help: Topic to generate prompt for
    default: the following input

  - name: context
    type: stringFromFiles
    help: Context to generate prompt for

  - name: style
    type: string
    default: component
    help: Diagram type to generate. Supported types are activity, sequence, class, state

  - name: uml_spec
    type: stringFromFile
    short: u
    help: PlantUML syntax spec to include
    default: |
      # Component Diagram

      ## Components

      Components must be bracketed. You can also use the `component` keyword to define a component.
      In this case the brackets can be omitted, but only if the component name does not include white-space
      or special characters.
      You can define an alias, using the `as` keyword.
      This alias will be used later, when defining relations.
      
        ```plantuml
        @startuml

        [First component]
        [Another component] as Comp2
        component Comp3
        component [Last\ncomponent] as Comp4
        
        @enduml
        ```
        
        ## Interfaces
        
        Interface can be defined using the `()` symbol (because this looks like a circle). You can also use the `interface` keyword to define an interface. And you can define an alias, using the `as` keyword. This alias will be used latter, when defining relations. We will see latter that interface definition is optional.
        
        ```plantuml
        @startuml
        
        () "First Interface"
        () "Another interface" as Interf2
        interface Interf3
        interface "Last\ninterface" as Interf4
        
        [component]
        footer //Adding "component" to force diagram to be a **component diagram**//
        @enduml
        ```
        
        ## Basic example
        
        Links between elements are made using combinations of dotted line (`..`), straight line (`--`), and arrows (`-->`) symbols.
        
        ```plantuml
        @startuml
        
        DataAccess - [First Component]
        [First Component] ..> HTTP : use
        
        @enduml
        ```
        
        ## Using notes
        
        You can use the `note left of` , `note right of` , `note top of` , `note bottom of` keywords to define notes related to a single object.
        
        ```plantuml
        @startuml
        [Component] as C

      note top of C: A top note
        
        note bottom of C
        A bottom note can also
        be on several lines
        end note
        
        note left of C
        A left note can also
        be on several lines
        end note

      note right of C: A right note
        @enduml
        ```
        
        A note can be also defined alone with the `note` keywords, then linked to other objects using the `..` symbol or whatever arrow symbol (`-`, `--`, ...).
        
        ```plantuml
        @startuml
        [Component] as C
        
        note as N
        A floating note can also
        be on several lines
        end note
        
        C .. N
        @enduml
        ```

      ## Grouping Components

      You can use several keywords to group components and interfaces together:

        - `package`
        - `node`
        - `folder`
        - `frame`
        - `cloud`
        - `database`

        ```plantuml
        @startuml
        
        package "Some Group" {
        HTTP - [First Component]
        [Another Component]
      }

        node "Other Groups" {
        FTP - [Second Component]
        [First Component] --> FTP
      }

        cloud {
        [Example 1]
      }


        database "MySql" {
        folder "This is my folder" {
        [Folder 3]
        }
        frame "Foo" {
        [Frame 4]
        }
      }


        [Another Component] --> [Example 1]
        [Example 1] --> [Folder 3]
        [Folder 3] --> [Frame 4]
        
        @enduml
        ```

      ## Changing arrows direction

      It is also possible to change arrow direction by adding `left`, `right`, `up` or `down` keywords inside the arrow:

        ```plantuml
        @startuml
        [Component] -left-> left
        [Component] -right-> right
        [Component] -up-> up
        [Component] -down-> down
        @enduml
        ```
        
        ## Long description
        
        It is possible to put description on several lines using square brackets.
        
        ```plantuml
        @startuml
        component comp1 [
        This component
        has a long comment
        on several lines
      ]
        @enduml
        ```
        
        ## Individual colors
        
        You can specify a color after component definition.
        
        ```plantuml
        @startuml
        component  [Web Server] #Yellow
        @enduml
        ```
        
      ## Skinparam

      You can use the [skinparam](https://plantuml.com/skinparam) command to change colors and fonts for the drawing. You can use this command :

        You can define specific color and fonts for stereotyped components and interfaces.
        
        ```plantuml
        @startuml
        
        skinparam interface {
        backgroundColor RosyBrown
        borderColor orange
      }

        skinparam component {
        FontSize 13
        BackgroundColor<<Apache>> Pink
        BorderColor<<Apache>> #FF6655
        FontName Courier
        BorderColor black
        BackgroundColor gold
        ArrowFontName Impact
        ArrowColor #FF6655
        ArrowFontColor #777777
      }

        () "Data Access" as DA
        Component "Web Server" as WS << Apache >>
        
        DA - [First Component]
        [First Component] ..> () HTTP : use
        HTTP - WS
        
        @enduml
        ```
        
        ```plantuml
        @startuml
        
        skinparam component {
        backgroundColor<<static lib>> DarkKhaki
        backgroundColor<<shared lib>> Green
      }

        skinparam node {
        borderColor Green
        backgroundColor Yellow
        backgroundColor<<shared_node>> Magenta
      }
        skinparam databaseBackgroundColor Aqua

        [AA] <<static lib>>
        [BB] <<shared lib>>
        [CC] <<static lib>>
        
        node node1
        node node2 <<shared_node>>
        database Production
        
        @enduml
        ```

        ## Display JSON Data on Component diagram
        
        ### Simple example
        
        ```plantuml
        @startuml
        allowmixing
        
        component Component
        ()        Interface
        
        json JSON {
        "fruit":"Apple",
        "size":"Large",
      "color": ["Red", "Green"]
      }
        @enduml
        ```

  - name: concise
    type: bool
    short: c
    help: Focus on conciseness and legibility

  - name: additional_system
    type: string
    help: Additional system prompt
    default: ""

  - name: additional
    type: string
    help: Additional prompt
    default: ""

  - name: list_sections
    type: bool
    help: List the sections in the input
    default: true

  - name: list_complex
    type: bool
    help: List the complex parts in the input
    default: true

  - name: with_summary
    type: bool
    help: Give a summary of the input at the end
    default: true

system-prompt: |
  You are an experienced system architect with expertise in designing complex software systems and architectures.
  You have mastered modeling techniques like UML and are highly skilled at 
  creating clear PlantUML diagrams from code and specifications. 
  
  You have deep knowledge of software design patterns, 
  distributed systems, microservices, domain driven design and other architectural approaches.
  You can rapidly analyze code and specs to identify key components, relationships, flows and boundaries.
  
  Your PlantUML diagrams are exemplars of clarity, brevity and precision.
  They convey the essence of the architecture and design to stakeholders and developers.
  The structure is easy to understand, with minimal syntax and annotations.
  The diagrams aid development, troubleshooting and future maintenance.
  
  {{ .additional_system }}

prompt: |
  Given the {{.style}} diagram spec:

  {{.uml_spec}}

  Write a diagram for {{.topic}}, {{if .concise}}focusing on conciseness and legibility{{end}}:

  ```
  {{.input}}
  {{if .context}}
  {{.context}}
  {{end}}
  ```

  Only use plantuml constructs defined in the specification above.
  
  Before outputting the diagram:
  {{ if .list_sections }}
  - Make a list of the components in the input and their type, as well as a few keywords to describe them
  - If they can be grouped, describe the groups and why
  - Describe the relationships between the components and the groups, and what direction the arrow should be
  - If there are especially complex relationships, describe why
  {{ end }}
  
  Don't create new function names. only use original variable and function names present in the given code.
  Be mindful of the arrow direction.
  For complex relationships and components, add notes. Don't output notes for trivial or simple facts already present in the component name or relationships.
  Use short keyword sentences.
  
  {{ if .with_summary }}
  At the end, give a summary of the input, describing each component and how it relates to the others.
  {{ end }}
  
  {{ .additional }}
  
