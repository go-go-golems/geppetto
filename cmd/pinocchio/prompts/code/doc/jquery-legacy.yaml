name: jquery-legacy
short: Document and analyze jQuery code for React refactoring.
flags:
  - name: code
    type: fileList
    help: The jQuery code to be analyzed and documented.
    required: true
  - name: additional_system
    type: stringList
    help: Additional system prompt
    default: []
  - name: additional
    type: stringList
    help: Additional prompt
    default: []
  - name: context
    type: fileList
    help: Additional context from files
  - name: bracket
    type: bool
    help: Use brackets in the answer
    default: false
system-prompt: |
  You are a highly skilled software engineer with expertise in both jQuery and React. You have a deep understanding of code structure, state management, and componentization. You are adept at analyzing legacy code and providing clear, structured documentation to facilitate refactoring into modern frameworks. You will maintain a neutral tone and focus on technical accuracy.
  {{ .additional_system  | join "\n" }}
prompt: |
  {{ define "context" -}}
  ### Understanding the Code

  1. **Read through the code**: Examine the provided jQuery code. Identify the purpose and functionality of each function and event handler. Highlight any AJAX calls, DOM manipulations, and event bindings.

  2. **Identify components**: Based on the code analysis, determine which UI elements or logical units can be abstracted into individual React components.

  3. **Map state and props**: Analyze the flow of data within the application. Identify variables that represent state and document how they are updated and accessed throughout the code.

  4. **Note side effects**: Identify any operations that produce side effects, such as modifying the DOM, changing global variables, or making asynchronous requests.

  ### Documenting the Code

  1. **Function comments**: For each function, provide a comment block that includes a description, parameters, return values, and any side effects or dependencies.

  2. **Event handling**: Document the event handling logic, specifying the events being listened to, the associated handlers, and the resulting actions.

  3. **State management**: Describe the state management strategy, including any patterns observed (e.g., global state, local state) and how state transitions occur.

  4. **Dependencies**: List and describe any third-party libraries or plugins used in the code, including how they are integrated and interact with the codebase.

  5. **Error handling**: Document the error handling approach, including how errors are captured, logged, or displayed to the user.

  ### Documentation Structure

  - **Introduction**: A brief overview of the jQuery codebase and its purpose.
  - **Code Analysis**: A detailed analysis of the code, including identified components, state and props mapping, and side effects.
  - **Function Documentation**: Docstrings for important functions or files, including their purpose, usage, and any notable characteristics.
  - **Component Abstraction**: Suggestions for componentization when transitioning to React.
  - **State Management**: Insights into the current state management and recommendations for React state handling.
  - **Event Handling**: Documentation of event listeners and their associated actions.
  - **Dependencies and Error Handling**: Information on dependencies used and the current error handling strategy.

  ### Example Docstring

  ```javascript
  /**
   * Function Name: functionName
   * Description: Brief description of the function's purpose.
   * Parameters:
   *   - paramName (paramType): Description of the parameter.
   * Return Type: The return type of the function.
   * Side Effects: Any side effects the function might have.
   * Dependencies: Any dependencies the function relies on.
   */
  function functionName(paramName) {
    // ... implementation ...
  }
  ```

  Please analyze the provided code and structure the documentation as outlined above.
  {{ if .additional }}Additional instructions:
  {{ .additional | join "\n" }}{{ end }}
  {{- end }}
  
  {{ template "context" . }}
  
  {{ if .context}}Additional Context:
  {{ range .context }}
  Path: {{ .Path }}
  ---
  {{ .Content }}
  ---
  {{- end }}
  {{ end }}
  
  Code: 
  
  {{ range .code }}
  Path: {{ .Path }}
  ---
  {{ .Content }}
  ---
  {{ end }}
  

  {{ if .bracket }}
  {{ template "context" . }}
  {{ end }}
